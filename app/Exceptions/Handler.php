<?php

namespace App\Exceptions;

use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Database\QueryException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Support\Facades\Log;
use Illuminate\Validation\ValidationException;
use App\Exceptions\ApiException;
use App\Exceptions\CodeData;
use App\Exceptions\MessageData;
use App\Exceptions\StatusData;
use ParseError;
use Throwable;
use BadMethodCallException;
use Error;

class Handler extends ExceptionHandler
{
    private $status = 0;
    private $message = '';
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }
    /**
     * @Name 定义异常状态
     * @Description
     * @Author 西安咪乐多软件
     * @Date 2021/6/6 23:11
     * @param $e
     */
    private function setErrorException($e)
    {

        if ($e instanceof BadMethodCallException) {
            $this->status = StatusData::BAD_METHOD_CALL_EXCEPTION;
            $this->message = MessageData::Error;
        } else if ($e instanceof Error) {
            $this->status = StatusData::Error;
            $this->message = MessageData::Error;
        } else if ($e instanceof ParseError) {
            $this->status = StatusData::PARES_ERROR;
            $this->message = MessageData::PARES_ERROR;
        } else if ($e instanceof \ReflectionException) {
            $this->status = StatusData::REFLECTION_EXCEPTION;
            $this->message = MessageData::REFLECTION_EXCEPTION;
        } else if ($e instanceof \RuntimeException) {
            Log::error($e->getMessage(),$e->getTrace());
            $this->status = StatusData::RUNTIME_EXCEPTION;
            $this->message = MessageData::RUNTIME_EXCEPTION;
        } else if ($e instanceof \ErrorException) {
            $this->status = StatusData::ERROR_EXCEPTION;
            $this->message = MessageData::ERROR_EXCEPTION;
        } else if ($e instanceof \InvalidArgumentException) {
            $this->status = StatusData::INVALID_ARGUMENT_EXCEPTION;
            $this->message = MessageData::INVALID_ARGUMENT_EXCEPTION;
        } else if ($e instanceof ModelNotFoundException) {
            $this->status = StatusData::MODEL_NOT_FOUND_EXCEPTION;
            $this->message = MessageData::MODEL_NOT_FOUND_EXCEPTION;
        } else if ($e instanceof QueryException) {
            $this->status = StatusData::QUERY_EXCEPTION;
            $this->message = MessageData::QUERY_EXCEPTION;
        }
    }

    public function render($request, Throwable $e)
    {
        if ($request->is("api/*")) {
            if ($e instanceof ApiException) {
                return J($e->getCode(), $e->getMessage(), [], null, 500);
            } elseif ($e instanceof ValidationException) {
                $err = $e->errors();
                $err = array_values($err);
                $msg = is_array($err) ? (is_array($err = $err[0]) ? $err[0] : $err) : $err;
                return J(500, "数据验证异常，原因：" . $msg, [], null, 500);

            }

            $this->setErrorException($e);
            if ($this->status) {
                $data = [
                    "file" => $e->getFile(),
                    "line" => $e->getLine(),
                    "trace" => $e->getTrace()
                ];
                if ($this->status == StatusData::MODEL_NOT_FOUND_EXCEPTION) {
                    $data['message'] = $e->getModel();
                } else {
                    $data['message'] = $e->getMessage();
                }
                if(env("APP_DEBUG")){
                    //调试模式
                    return J($this->status,$this->message,$data,null,500);
                }else{
                    return J($this->status,MessageData::COMMON_EXCEPTION,[],null,500);
                }
                exit();
            }

        }
        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }
}
